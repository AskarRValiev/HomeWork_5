#3-Создайте два списка — один с названиями языков программирования, другой — с числами от 1 до длины первого.
#['python', 'c#'] [1,2]
#Вам нужно сделать две функции: первая из которых создаст список кортежей, состоящих из номера и языка, написанного большими буквами.
#[(1,'PYTHON'), (2,'C#')]
#Вторая — которая отфильтрует этот список следующим образом: если сумма очков слова имеет в делителях номер, с которым она в паре в кортеже, то кортеж остается, его номер заменяется на сумму очков.
#[сумма очков c# = 102, в делителях есть 2 с которым в паре. Значит список будет] [(1,'PYTHON'), (102,'C#')]
#Если нет — удаляется. Суммой очков называется сложение порядковых номеров букв в слове. 

with open('lang.txt', 'r') as file:
    text = file.read()

    ind = [n for n in range(1, 11)]


    def lst_zipped(lst_1: list, lst_2: str):
        '''
        Принимает два списка, на выходе список, возвращает список состоящий из кортежей по приципу:
        [(1й элемент lst_1, 1й элемент lst_2), (2й элемент lst_1, 2й элемент lst_2) ......]
        '''
        s = "".join(lst_2)
        s = s.upper()         
        lst_2 = s.split('\n')
        return list(zip(lst_1, lst_2))


    def cut_float_div(lst: list):
        '''
        Принимает на вход список из кортежей из функции lst_zipped, вычисляет сумму очков слова и делит на первый элемент 
        кортежа, если делится без остатка, то кортеж остается в результирующем списке
        '''
        new_lst = []
        for i, item in lst:
            sum = 0
            for e in item:
                sum += ord(e)
            if sum % i == 0:
                new_lst.append((i, item))
        return new_lst

new_t = lst_zipped(ind, text)
print('zipped list is: ', new_t)
cutted_list = cut_float_div(new_t)
print('result list s: ', cutted_list)
